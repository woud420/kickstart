name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v0.3.0, v1.0.0
  workflow_dispatch:  # Manual trigger with inputs
    inputs:
      version:
        description: 'Version to release (e.g., 0.3.1)'
        required: true
        type: string

permissions:
  contents: write  # Needed to create releases
  packages: write  # Needed if publishing to GitHub packages

jobs:
  build-binaries:
    name: Build ${{ matrix.os }} Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: kickstart-linux-x86_64
            pyinstaller_args: --onefile
          - os: macos-latest
            artifact_name: kickstart-darwin-x86_64
            pyinstaller_args: --onefile --windowed
          - os: windows-latest
            artifact_name: kickstart-windows-x86_64.exe
            pyinstaller_args: --onefile --console

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install pyinstaller

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Update version in pyproject.toml
        run: |
          poetry version ${{ steps.version.outputs.VERSION }}

      - name: Build binary with PyInstaller
        run: |
          poetry run pyinstaller \
            ${{ matrix.pyinstaller_args }} \
            --name kickstart \
            --add-data "src/templates:src/templates" \
            --hidden-import typer \
            --hidden-import rich \
            --hidden-import jinja2 \
            --distpath dist \
            --workpath build \
            --specpath build \
            --clean \
            --noconfirm \
            src/cli/main.py

      - name: Test binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./dist/kickstart.exe --version
            ./dist/kickstart.exe --help
          else
            ./dist/kickstart --version
            ./dist/kickstart --help
            # Make sure it's executable on Unix
            chmod +x ./dist/kickstart
          fi
        shell: bash

      - name: Compress binary
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a -tzip ../${{ matrix.artifact_name }}.zip kickstart.exe
          else
            tar -czf ../${{ matrix.artifact_name }}.tar.gz kickstart
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
          fi

          # Create changelog
          cat << EOF > CHANGELOG.md
          ## What's Changed in v${{ steps.version.outputs.VERSION }}

          ### Commits
          ${CHANGES}

          ### Installation

          #### Via pip (recommended)
          \`\`\`bash
          pip install kickstart==${{ steps.version.outputs.VERSION }}
          \`\`\`

          #### Via binary
          Download the appropriate binary for your platform below and add it to your PATH.

          **macOS/Linux:**
          \`\`\`bash
          # Download and extract (replace darwin with linux for Linux)
          tar -xzf kickstart-darwin-x86_64.tar.gz
          chmod +x kickstart
          sudo mv kickstart /usr/local/bin/
          \`\`\`

          **Windows:**
          Download the zip file, extract, and add to your PATH.

          ### Checksums
          EOF

          # Add checksums
          cd artifacts
          for file in */*.tar.gz */*.zip; do
            if [ -f "$file" ]; then
              echo "\`$(basename $file)\`: \`$(sha256sum $file | cut -d' ' -f1)\`" >> ../CHANGELOG.md
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
          files: |
            artifacts/*/*.tar.gz
            artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    # Only publish to PyPI on actual version tags, not manual triggers
    if: github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.0'

      - name: Get version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          poetry version $VERSION

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --skip-existing
        continue-on-error: true  # Don't fail if package already exists

  docker-build:
    name: Build Docker Image
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true  # Don't fail if no Docker credentials

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max